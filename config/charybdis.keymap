#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        LeftClickRight {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        RightClickRight {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
        };

        ParaLeft {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <3 15>;
        };

        ParaRight {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <4 16>;
        };

        BrackLeft {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <7 19>;
        };

        BrakRight {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 20>;
        };
    };

    macros {
        wnd_left_half: wnd_left_half {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LEFT_ARROW))>;
            label = "WND_LEFT_HALF";
        };

        wnd_right_half: wnd_right_half {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(RIGHT))>;
            label = "WND_RIGHT_HALF";
        };

        wnd_top_half: wnd_top_half {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(UP_ARROW))>;
            label = "WND_TOP_HALF";
        };

        wnd_bottom_half: wnd_bottom_half {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(DOWN))>;
            label = "WND_BOTTOM_HALF";
        };

        wnd_top_left: wnd_top_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(U))>;
            label = "WND_TOP_LEFT";
        };

        wnd_top_right: wnd_top_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(I))>;
            label = "WND_TOP_RIGHT";
        };

        wnd_bottom_left: wnd_bottom_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(J))>;
            label = "WND_BOTTOM_LEFT";
        };

        wnd_bottom_right: wnd_bottom_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(K))>;
            label = "WND_BOTTOM_RIGHT";
        };

        wnd_maximize: wnd_maximize {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(ENTER))>;
            label = "WND_MAXIMIZE";
        };

        wnd_first_third: wnd_first_third {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(D))>;
            label = "WND_FIRST_THIRD";
        };

        wnd_last_third: wnd_last_third {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(G))>;
            label = "WND_LAST_THIRD";
        };

        wnd_first_2_thirds: wnd_first_2_thirds {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(E))>;
            label = "WND_FIRST_2_THIRDS";
        };

        wnd_last_2_thirds: wnd_last_2_thirds {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(T))>;
            label = "WND_LAST_2_THIRDS";
        };

        toggle_qwerty: toggle_qwerty {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1>;
            label = "TOGGLE_QWERTY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Colemak-DH {
            bindings = <
&kp GRAVE   &kp N1       &kp N2         &kp N3      &kp N4        &kp N5   &kp N6            &kp N7        &kp N8      &kp N9           &kp N0       &kp LEFT_BRACKET
&kp TAB     &kp Q        &kp W          &kp F       &kp P         &kp B               &kp J  &kp L         &kp U       &kp Y            &kp SEMI     &kp RIGHT_BRACKET
&kp ESC     &mt LCTRL A  &mt LALT R     &mt LGUI S  &mt LSHIFT T  &kp G               &kp M  &mt RSHIFT N  &mt RGUI E  &mt RALT I       &mt RCTRL O  &kp APOS
&kp LSHIFT  &lt 4 Z      &kp X          &kp C       &kp D         &kp V               &kp K  &kp H         &kp COMMA   &kp DOT          &lt 4 SLASH  &lt 3 BACKSLASH
            &lt 2 TAB    &kp BACKSPACE  &kp LGUI    &kp SPACE     &kp DEL  &kp ENTER         &kp SPACE                 &lt 3 BACKSPACE
            >;
        };

        Qwerty {
            bindings = <
&kp GRAVE   &kp N1       &kp N2         &kp N3      &kp N4        &kp N5   &kp N6            &kp N7        &kp N8      &kp N9           &kp N0          &kp LEFT_BRACKET
&kp TAB     &kp Q        &kp W          &kp E       &kp R         &kp T               &kp Y  &kp U         &kp I       &kp O            &kp P           &kp RIGHT_BRACKET
&kp ESC     &mt LCTRL A  &mt LALT S     &mt LGUI D  &mt LSHIFT F  &kp G               &kp H  &mt RSHIFT J  &mt RGUI K  &mt RALT L       &mt RCTRL SEMI  &kp APOS
&kp LSHIFT  &lt 4 Z      &kp X          &kp C       &kp V         &kp B               &kp N  &kp M         &kp COMMA   &kp DOT          &lt 4 SLASH     &lt 3 BACKSLASH
            &lt 2 TAB    &kp BACKSPACE  &kp LGUI    &kp SPACE     &kp DEL  &kp ENTER         &kp SPACE                 &lt 3 BACKSPACE
            >;
        };

        Navigation {
            bindings = <
&kp F12          &kp F1          &kp F2           &kp F3             &kp F4           &kp F5    &kp F6                &kp F7  &kp F8  &kp F9  &kp F10          &kp F11
&trans           &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp UP             &kp EQUAL        &kp LBRC              &kp RBRC  &kp N7  &kp N8  &kp N9  &kp KP_PLUS      &trans
&kp PRINTSCREEN  &kp INSERT      &kp LEFT         &kp DOWN           &kp RIGHT        &kp LBKT              &kp RBKT  &kp N4  &kp N5  &kp N6  &kp KP_MINUS     &kp KP_DIVIDE
&trans           &kp DEL         &kp PG_UP        &kp CAPS           &kp PG_DN        &kp LPAR              &kp RPAR  &kp N1  &kp N2  &kp N3  &kp KP_MULTIPLY  &trans
                 &trans          &trans           &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans    &kp KP_DOT            &kp N0          &mo 4
            >;
        };

        Symbols {
            bindings = <
&kp F12  &kp F1         &kp F2     &kp F3             &kp F4            &kp F5         &kp F6                         &kp F7            &kp F8     &kp F9        &kp F10        &kp F11
&trans   &kp EXCL       &kp AT     &kp HASH           &kp DLLR          &kp PRCNT                          &kp CARET  &kp AMPS          &kp STAR   &kp QUESTION  &kp SQT        &trans
&trans   &kp PLUS       &kp EQUAL  &kp LPAR           &kp RPAR          &kp DQT                            &kp COLON  &kp LBKT          &kp RBKT   &kp LBRC      &kp RBRC       &trans
&trans   &kp LESS_THAN  &kp PIPE   &kp MINUS          &kp GREATER_THAN  &kp BACKSLASH                      &kp GRAVE  &kp UNDERSCORE    &kp SLASH  &kp TILDE     &kp SEMICOLON  &trans
         &mo 4          &trans     &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &trans         &kt C_FAST_FORWARD             &kp C_PLAY_PAUSE             &trans
            >;
        };

        Adjustments {
            bindings = <
&kp F12  &kp F1       &kp F2          &kp F3            &kp F4             &kp F5           &kp F6                &kp F7      &kp F8      &kp F9      &kp F10      &kp F11
&trans   &sys_reset   &bt BT_PRV      &bt BT_NXT        &bt BT_CLR         &out OUT_TOG             &bt BT_SEL 0  &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &sys_reset   &trans
&trans   &bootloader  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT         &kp C_MUTE               &bt BT_SEL 1  &mkp MB1    &mkp MB2    &mkp MB3    &bootloader  &trans
&trans   &trans       &mo 6           &mo 5             &kp C_VOLUME_DOWN  &kp C_VOLUME_UP          &bt BT_SEL 2  &trans      &mo 5       &mo 6       &trans       &trans
         &trans       &trans          &trans            &trans             &trans           &trans                &trans                  &trans
            >;
        };

        Sniper {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &mo 6   &trans  &trans  &trans          &trans  &trans    &trans    &mo 6     &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans          &trans              &trans
            >;
        };

        Scroll {
            bindings = <
&toggle_qwerty  &trans            &trans            &trans            &trans             &studio_unlock       &trans          &trans    &trans    &trans    &trans  &trans
&trans          &wnd_last_third   &wnd_top_left     &wnd_top_half     &wnd_top_right     &wnd_last_2_thirds           &trans  &trans    &trans    &trans    &trans  &trans
&trans          &wnd_first_third  &wnd_left_half    &wnd_maximize     &wnd_right_half    &wnd_first_2_thirds          &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans          &trans            &wnd_bottom_left  &wnd_bottom_half  &wnd_bottom_right  &trans                       &trans  &trans    &trans    &trans    &trans  &trans
                &trans            &trans            &trans            &trans             &trans               &trans          &trans              &trans
            >;
        };
    };
};
